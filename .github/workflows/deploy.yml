# name: Node.js CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main  

# jobs:
#   deploy:
#     runs-on: ubuntu-latest  

#     env:  
#       EC2_USER: ${{secrets.EC2_USER}}
#       EC2_HOST: ${{secrets.EC2_HOST}}
#       PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#       # NODE_ENV: production

#     steps:
#       # Step 1: Checkout the repository
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # Step 2: Cache dependencies to speed up builds
#       - name: Cache Node.js modules
#         uses: actions/cache@v3
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-node-

#       # Step 3: Install dependencies and build the project
#       - name: Install Node.js, npm, and dependencies
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - run: npm ci --include=dev  # Install all dependencies (including devDependencies)

#       - name: Build the project
#         run: npm run build

#       # Step 4: Deploy to AWS EC2 via SSH
#       - name: Deploy to EC2
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#         run: |
#           echo "$SSH_PRIVATE_KEY" > private_key.pem
#           chmod 600 private_key.pem
#           ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
#             set -e  # Exit immediately if a command exits with a non-zero status

#             echo "Navigating to the project folder on EC2..."
#             cd /home/ubuntu/Project-Management-App---Server  

#             echo "Resetting and pulling the latest changes from GitHub..."
#             git reset --hard
#             git pull origin main

#             echo "Installing dependencies on EC2..."
#             npm ci --include=dev

#             echo "Building the project on EC2..."
#             npm run build

#             echo "Stopping any existing PM2 processes to avoid duplicates..."
#             pm2 kill

#             echo "Starting the app with PM2..."
#             pm2 start dist/src/index.js --name "project-management-app" --update-env
            
#             echo "Restarting the PM2 process..."
#             pm2 restart "project-management-app" --update-env && pm2 logs --lines 50

#             echo "Saving the PM2 process list and setting up PM2 to restart on reboot..."
#             pm2 save
#             sudo env PATH=$PATH:$(which node) $(which pm2) startup systemd -u $EC2_USER --hp /home/$EC2_USER

#             echo "Deployment completed successfully!"
#           EOF 

name: Deploy to EC2

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Start SSH agent and add key
      run: |
        echo "Starting the SSH agent..."
        eval $(ssh-agent -s)

        echo "Creating .ssh directory..."
        mkdir -p ~/.ssh  # Ensure the .ssh folder exists

        echo "Adding the private key to SSH..."
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa  # Set appropriate permissions
        ls -al ~/.ssh  # List the files to confirm
        ssh-add ~/.ssh/id_rsa
        echo "SSH key added!"
      env:
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: Test SSH Connection
      run: ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "echo SSH connection successful"
      env:
        EC2_USER: ubuntu
        EC2_HOST: ${{ secrets.EC2_HOST }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
          echo "Navigating to project folder..."
          cd /home/ubuntu/Project-Management-App---Server
  
          echo "Resetting and pulling the latest changes from GitHub..."
          git reset --hard
          git pull origin main
  
          echo "Installing dependencies..."
          npm ci --include=dev
  
          echo "Restarting PM2 process..."
          pm2 restart ecosystem.config.js || pm2 start ecosystem.config.js
          pm2 save
  
          echo "Deployment completed successfully!"
        EOF
      env:
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
  
